# -*- coding: utf-8 -*-
"""Copy of Welcome to Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m9eO634rspLQ7db_5kgJBiFh6p7Pz5yX
"""

import pandas as pd
import numpy as np

"""**Distance Matrix Calculation**"""

def calculate_distance_matrix(/content/dataset-2.csv: str) -> pd.DataFrame:

    # Read the dataset
    df = pd.read_csv(/content/dataset-2.csv)

    # Get unique IDs
    unique_ids = pd.unique(df[['id', 'id_2']].values.ravel('K'))

    # Create a distance matrix with zeroes
    distance_matrix = pd.DataFrame(0, index=unique_ids, columns=unique_ids)

    # Fill the distance matrix with known distances
    for _, row in df.iterrows():
        id1, id2, distance = row['id'], row['id_2'], row['distance']
        distance_matrix.at[id1, id2] = distance
        distance_matrix.at[id2, id1] = distance  # Ensure symmetry

    # Calculate cumulative distances
    for k in unique_ids:
        for i in unique_ids:
            for j in unique_ids:
                if distance_matrix.at[i, j] > distance_matrix.at[i, k] + distance_matrix.at[k, j]:
                    distance_matrix.at[i, j] = distance_matrix.at[i, k] + distance_matrix.at[k, j]

    return distance_matrix

"""**Unroll Distance Matrix**"""

def unroll_distance_matrix(distance_matrix: pd.DataFrame) -> pd.DataFrame:

    # Create an empty list to hold the results
    data = []

    # Iterate over the distance matrix
    for id_start in distance_matrix.index:
        for id_end in distance_matrix.columns:
            if id_start != id_end:  # Exclude same id_start to id_end pairs
                distance = distance_matrix.at[id_start, id_end]
                data.append({'id_start': id_start, 'id_end': id_end, 'distance': distance})


    result_df = pd.DataFrame(data)

    return result_df

"""**Finding IDs within Percentage Threshold**"""

def find_ids_within_ten_percentage_threshold(df: pd.DataFrame, reference_id: int) -> list:

    reference_distances = df[df['id_start'] == reference_id]['distance']

    # Check if the reference ID exists in the DataFrame
    if reference_distances.empty:
        return []

    # Calculate the average distance
    average_distance = reference_distances.mean()

    # Calculate the range for 10% threshold
    lower_bound = average_distance * 0.9
    upper_bound = average_distance * 1.1

    # Find IDs within the threshold
    ids_within_threshold = df[(df['distance'] >= lower_bound) & (df['distance'] <= upper_bound)]

    # Extract unique id_start values and sort them
    result_ids = sorted(ids_within_threshold['id_start'].unique())

    return result_ids

"""**Calculate Toll Rate**"""

def calculate_toll_rate(df: pd.DataFrame) -> pd.DataFrame:

    # Define the rate coefficients for each vehicle type
    rate_coefficients = {
        'moto': 0.8,
        'car': 1.2,
        'rv': 1.5,
        'bus': 2.2,
        'truck': 3.6
    }

    # Calculate toll rates and add new columns
    for vehicle, coefficient in rate_coefficients.items():
        df[vehicle] = df['distance'] * coefficient

    return df

"""**Calculate Time-Based Toll Rates**"""

def calculate_time_based_toll_rates(df: pd.DataFrame) -> pd.DataFrame:

    # Define the day and time intervals
    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
    weekends = ['Saturday', 'Sunday']

    # Create time objects for the intervals
    weekday_morning_start = time(0, 0)
    weekday_morning_end = time(10, 0)
    weekday_afternoon_start = time(10, 0)
    weekday_afternoon_end = time(18, 0)
    weekday_evening_start = time(18, 0)
    weekday_evening_end = time(23, 59, 59)

    # Assign start_day, end_day, start_time, and end_time for demonstration
    df['start_day'] = np.random.choice(weekdays + weekends, size=len(df))
    df['end_day'] = np.random.choice(weekdays + weekends, size=len(df))
    df['start_time'] = pd.to_datetime(np.random.choice(['00:00:00', '10:00:00', '18:00:00', '23:59:59'], size=len(df))).dt.time
    df['end_time'] = pd.to_datetime(np.random.choice(['00:00:00', '10:00:00', '18:00:00', '23:59:59'], size=len(df))).dt.time

    # Adjust toll rates based on time intervals
    for index, row in df.iterrows():
        # Determine the applicable discount based on start_day and start_time
        if row['start_day'] in weekdays:
            if row['start_time'] >= weekday_morning_start and row['start_time'] < weekday_morning_end:
                discount_factor = 0.8
            elif row['start_time'] >= weekday_afternoon_start and row['start_time'] < weekday_afternoon_end:
                discount_factor = 1.2
            else:  # Evening
                discount_factor = 0.8
        else:  # Weekend
            discount_factor = 0.7


        df.at[index, 'moto'] *= discount_factor
        df.at[index, 'car'] *= discount_factor
        df.at[index, 'rv'] *= discount_factor
        df.at[index, 'bus'] *= discount_factor
        df.at[index, 'truck'] *= discount_factor

    return df















